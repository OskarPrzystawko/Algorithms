Algorithm: Weighted quick-union
Sequence: 9-0 3-4 5-8 7-2 2-1 5-7 0-3 4-2

Initially
sz[]
0 1 2 3 4 5 6 7 8 9
1 1 1 1 1 1 1 1 1 1

id[]
0 1 2 3 4 5 6 7 8 9
0 1 2 3 4 5 6 7 8 9

0 1 2 3 4 5 6 7 8 9

--------------------
input: 9-0
sz[]
0 1 2 3 4 5 6 7 8 9
1 1 1 1 1 1 1 1 1 2

id[0] = 9
0 1 2 3 4 5 6 7 8 9
9 1 2 3 4 5 6 7 8 9

1  2  3  4  5  6  7  8  9
                        |
                        0

Array access:
 union()
    find(0)     -> 1 access
    find(9)     -> 1 access
    union - if  -> 5 accesses

Array accesses = 7
--------------------
input: 3-4
sz[]
0 1 2 3 4 5 6 7 8 9
1 1 1 2 1 1 1 1 1 2

id[4] = 3
0 1 2 3 4 5 6 7 8 9
9 1 2 3 3 5 6 7 8 9

1  2  3  5  6  7  8  9
      |              |
      4              0

Array access:
 union()
    find(3)     -> 1 access
    find(4)     -> 1 access
    union - if  -> 5 accesses

Array accesses = 7
--------------------
input: 5-8
sz[]
0 1 2 3 4 5 6 7 8 9
1 1 1 2 1 2 1 1 1 2

id[8] = 5
0 1 2 3 4 5 6 7 8 9
9 1 2 3 3 5 6 7 5 9

1  2  3  5  6  7  9
      |  |        |
      4  8        0

Array access:
 union()
    find(3)     -> 1 access
    find(4)     -> 1 access
    union - if  -> 5 accesses

Array accesses = 7
--------------------
input: 7-2
sz[]
0 1 2 3 4 5 6 7 8 9
1 1 1 2 1 2 1 2 1 2

id[2] = 7
0 1 2 3 4 5 6 7 8 9
9 1 7 3 3 5 6 7 5 9

1  3  5  6  7  9
   |  |     |  |
   4  8     2  0

Array access:
 union()
    find(7)     -> 1 access
    find(2)     -> 1 access
    union - if  -> 5 accesses

Array accesses = 7
--------------------
input: 2-1
sz[]
0 1 2 3 4 5 6 7 8 9
1 1 1 2 1 2 1 3 1 2

id[1] = 7
0 1 2 3 4 5 6 7 8 9
9 7 7 3 3 5 6 7 5 9

3  5  6   7    9
|  |     / \   |
4  8    2   1  0

Array access:
 union()
    find(2)     -> 3 accesses
    find(1)     -> 1 access
    union - if  -> 5 accesses

Array accesses = 9
--------------------
input: 5-7
sz[]
0 1 2 3 4 5 6 7 8 9
1 1 1 2 1 2 1 5 1 2

id[5] = 7
0 1 2 3 4 5 6 7 8 9
9 7 7 3 3 7 6 7 5 9

3  6   7     9
|    / | \   |
4   2  1  5  0
          |
          8

Array access:
 union()
    find(5)     -> 1 access
    find(7)     -> 1 access
    union - if  -> 5 accesses

Array accesses = 7
--------------------
input: 0-3
sz[]
0 1 2 3 4 5 6 7 8 9
1 1 1 2 1 2 1 5 1 4

id[3] = 9
0 1 2 3 4 5 6 7 8 9
9 7 7 9 3 7 6 7 5 9

6    7       9
   / | \    / \
  2  1  5  0   3
        |      |
        8      4

Array access:
 union()
    find(0)     -> 3 access
    find(3)     -> 1 access
    union - if  -> 5 accesses

Array accesses = 9
--------------------
input: 4-2
sz[]
0 1 2 3 4 5 6 7 8 9
1 1 1 2 1 2 1 9 1 4

id[3] = 9
0 1 2 3 4 5 6 7 8 9
9 7 7 9 3 7 6 7 5 7

6      7
    / |  | \
   2  1  5  9
         |  | \
         8  0  3
               |
               4


Array access:
 union()
    find(4)     -> 5 access
    find(2)     -> 3 access
    union - if  -> 5 accesses

Array accesses = 13
--------------------

Total array accesses = 5*7 + 2*9 + 13 = 66
Average array accesses per union = 66 / 8 = 8,25